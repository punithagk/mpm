<?php

/**
 * @file
 * Handles all things concerning The MailChimp-Ubercart integreation
 *
 * The Ubercart Mailchimp Subscribe module adds a newsletter subscription pane to checkout,
 * and subscribes users to particular mailchimp newsletters upon successful purchase.
 */

/**
 * Implementation of hook_checkout_pane()
 */
function uc_mailchimp_subscribe_checkout_pane() {
  $panes[] = array('id' => 'uc_mailchimp_subscribe',
    'callback' => 'uc_mailchimp_subscribe_checkout_pane_callback',
    'title' => t(variable_get('mailchimp_subscribe_page_title','Subscription Options')),
    'desc' => t('Allow customers to subscribe to MailChimp.'),
    'weight' => 9,
    'enabled' => TRUE,
  );
  return $panes;
}

/**
 * Implementation of hook_uc_checkout_complete()
 * Used to setup mailchimp signups for batch signups
 */
function uc_mailchimp_subscribe_uc_checkout_complete($order, $account) {
  //dpm(array('uc_checkout_complete' => $order, 'account' => $account));
  $lists = _mailchimp_get_available_lists($account);
  if(!empty($lists)) {
    foreach($lists as $listid => $list) {
      if(!empty($order->data['uc_mailchimp_subscribe']['uc_mailchimp_subscribe_' . $listid])) {
        uc_mailchimp_subscribe_to_list($list, $account, $order);
      }
    }
  }
}

/**
 * Subscribes user to a list and adds an order admin comment.
 */
function uc_mailchimp_subscribe_to_list($list, $account, $order) {
  if($q = _mailchimp_get_api_object()) {
    $mergevars = _mailchimp_load_user_list_mergevars($account->uid, $list->id, $q->listMergeVars($list->id));
    $mergevars['EMAIL'] = $account->mail;
    $success = _mailchimp_subscribe_user($list, $account->mail, $mergevars, FALSE, $q);

    if($success) {
      uc_order_comment_save($order->order_id, $account->uid, t('@email was signed up for the "@list" newsletter.', array('@email' => $account->mail, '@list' => $list->name)), 'admin', $order->order_status, FALSE);
    }
  }
}

/**
 * Much of this code was taken from mailchimp.module's mailchimp_auth_newsletter_form()
 */
function uc_mailchimp_subscribe_forms($form_state = array()) {
  global $user;

  $form = array();
  $lists = _mailchimp_get_available_lists($user);

  if(empty($lists)) {
    return $form;
  }

  $default_value = 0;

  foreach($lists as $listid => $list) {
    $default_value = $list->listtype == MAILCHIMP_LISTTYPE_OPTOUT ? TRUE : FALSE;
    if(isset($form_state['uc_mailchimp_subscribe_' . $listid])) {
      $default_value = $form_state['uc_mailchimp_subscribe_' . $listid];
    }
    $form['uc_mailchimp_subscribe_' . $list->id] = array(
        '#type' => 'checkbox',
        '#title' => $list->label ? t($list->label) : t('Subscribe to the @newsletter newsletter', array('@newsletter' => $list->name)),
        '#default_value' => $default_value,
        '#description' => strip_tags($list->description ? t($list->description) : ''),
        '#attributes' => array('class' => 'mailchimp-newsletter-checkbox-' . $list->id),
        );
  }

  return $form;
}

/**
 * uc_mailchimp_subscribe checkout pane for Ubercart
 */
function uc_mailchimp_subscribe_checkout_pane_callback($op, &$arg1, $arg2) {
  switch ($op) {
    case 'view':
      //dpm(array('ucmc checkout view' => $arg1, 'arg2' => $arg2));
      $subscribe_form = array();
      $subscribe_form = uc_mailchimp_subscribe_forms(empty($arg1->data['uc_mailchimp_subscribe']) ? array() : $arg1->data['uc_mailchimp_subscribe']);
      $contents = $subscribe_form;
      return array('contents' => $subscribe_form);

    case 'process':
      $arg1->data['uc_mailchimp_subscribe'] = $arg2;
      //dpm(array('ucmc checkout process' => $arg1, 'arg2' => $arg2));
      break;

    case 'review':
      global $user;
      $lists = _mailchimp_get_available_lists($user);

      //dpm(array('ucmc checkout review' => $arg1, 'arg2' => $arg2, 'list' => $lists));

      if(!empty($lists)) {
        foreach($lists as $listid => $list) {
          if(!empty($arg1->data['uc_mailchimp_subscribe']['uc_mailchimp_subscribe_' . $listid])) {
            $review[] = t(variable_get("uc_mailchimp_{$listid}_checkout_pane_label",'Subscribe To The '.$list->name.' Mailing List'));
          }
        }
      }
      return $review;
  }
}

/**
 * Implementation of mailchimp's hook_mailchimp_merge_keys()
 */
function uc_mailchimp_subscribe_mailchimp_merge_keys() {
  $out = array();
  if (function_exists('token_get_list')) {
    $groups = array('order');
    $tokens = token_get_list($groups);
    foreach($groups as $group) {
      if (is_array($tokens[$group])) {
        foreach ($tokens[$group] as $token => $name) {
          $out['token_'. $token] = t('Token (!group): !field', array('!group' => $group, '!field' => $name));
        }
      }
    }
  }
  return $out;
}

/*
 * Implementation of mailchimp's hook_mailchimp_merge_values()
 */
function uc_mailchimp_subscribe_mailchimp_merge_values($user) {
  if(!function_exists('token_get_values')) {
    return array();
  }

  // If we got anonymous user, nothing to be found
  if($user->uid == 0) {
    return array();
  }

  // Find the last order from this user where billing first name is something.
  // While this may not get the order in question, it will at the very least
  // try hard enough imho.
  $last_order_id = db_result(db_query('SELECT order_id FROM {uc_orders} WHERE uid = %d AND billing_first_name <> "" ORDER BY created DESC LIMIT 1', array($user->uid)));
  if(empty($last_order_id)) {
    return array();
  }

  $order = uc_order_load($last_order_id);

  $out = array();

  $vars = token_get_values('order', $order);
  foreach ($vars->tokens as $key => $value) {
    $out['token_'. $value] = $vars->values[$key];
  }

  return $out;
}

